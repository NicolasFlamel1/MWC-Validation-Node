// Header files
#include "./common.h"
#include <cstring>
#include "./consensus.h"
#include "./saturate_math.h"

using namespace std;


// Namespace
using namespace MwcValidationNode;


// Constants

// Block time
const chrono::seconds Consensus::BLOCK_TIME = 60s;

// Minute height
const uint64_t Consensus::MINUTE_HEIGHT = Common::SECONDS_IN_A_MINUTE / Consensus::BLOCK_TIME.count();

// Hour height
const uint64_t Consensus::HOUR_HEIGHT = Common::MINUTES_IN_A_HOUR * Consensus::MINUTE_HEIGHT;

// Day height
const uint64_t Consensus::DAY_HEIGHT = Common::HOURS_IN_A_DAY * Consensus::HOUR_HEIGHT;

// Week height
const uint64_t Consensus::WEEK_HEIGHT = Common::DAYS_IN_A_WEEK * Consensus::DAY_HEIGHT;

// Year height
const uint64_t Consensus::YEAR_HEIGHT = Common::WEEKS_IN_A_YEAR * Consensus::WEEK_HEIGHT;

// C29 edge bits
const uint8_t Consensus::C29_EDGE_BITS = 29;

// C31 edge bits
const uint8_t Consensus::C31_EDGE_BITS = 31;

// Maximum edge bits
const uint8_t Consensus::MAXIMUM_EDGE_BITS = 63;

// Check if floonet
#ifdef FLOONET

	// Genesis block header
	const Header Consensus::GENESIS_BLOCK_HEADER(
	
		// Version
		1,
	
		// Height
		0,
	
		// Timestamp
		chrono::time_point<chrono::system_clock>(chrono::seconds(1558888201)),
		
		// Previous block hash
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		
		// Previous header root
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x76, 0x47, 0xFB, 0x29, 0xCE, 0x96, 0x4D, 0xDF, 0x2B, 0x27, 0xC6, 0x39, 0xAE, 0x60, 0xC4, 0xC9, 0x0F, 0xAF, 0xE5, 0xC4, 0x2E, 0x53},
		
		// Output root
		(uint8_t []){0x69, 0x85, 0x96, 0x6E, 0xFC, 0xD7, 0x41, 0xC9, 0xEE, 0x42, 0xFE, 0x1A, 0x01, 0x64, 0x76, 0xB7, 0x4F, 0xFA, 0x1E, 0x81, 0x8D, 0xFD, 0x4D, 0x3B, 0x44, 0x1F, 0x8E, 0x0F, 0x87, 0x6A, 0xA2, 0x28},
		
		// Rangeproof root
		(uint8_t []){0x43, 0xC1, 0xAC, 0x00, 0x25, 0xE1, 0x7F, 0xB6, 0x77, 0xB3, 0x32, 0xC6, 0x0E, 0x0D, 0x8B, 0x46, 0xCE, 0x87, 0x1D, 0xF8, 0x76, 0x49, 0x8C, 0x0D, 0xD5, 0xC9, 0x5E, 0x42, 0x94, 0xAE, 0x8F, 0xE5},
		
		// Kernel root
		(uint8_t []){0x9B, 0xD2, 0xD3, 0x76, 0x44, 0x0E, 0x2B, 0x68, 0xEE, 0x1B, 0x06, 0x6B, 0xEF, 0xED, 0x59, 0x4B, 0x0A, 0x3D, 0x9F, 0xB5, 0x6D, 0x20, 0xAE, 0x04, 0x30, 0x59, 0xF5, 0xDB, 0x4D, 0x25, 0xD6, 0xE0},
		
		// Total kernel offset
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		
		// Output Merkle mountain range size
		1,
		
		// Kernel Merkle mountain range size
		1,
		
		// Total difficulty
		1,
		
		// Secondary scaling
		1856,
		
		// Nonce
		73,
		
		// Edge bits
		Consensus::C29_EDGE_BITS,
		
		// Proof nonces
		(uint64_t []){3192500, 6825707, 24230992, 31245203, 53163694, 90654995, 106472612, 110444199, 139989294, 156335087, 156355985, 183386417, 189157284, 207907104, 213905482, 215326841, 220116398, 256066326, 259812081, 260939712, 272131888, 273570144, 282535412, 304151827, 322481271, 326494676, 355927801, 361940398, 369475836, 386602103, 399551873, 409685415, 416682585, 419304710, 435496048, 447341740, 462273908, 468790263, 491944474, 494233402, 511976431, 533915547}
	);
	
	// Genesis block kernel
	const Kernel Consensus::GENESIS_BLOCK_KERNEL(
	
		// Features
		Kernel::Features::COINBASE,
		
		// Fee
		0,
		
		// Lock height
		0,
		
		// Relative height
		0,
		
		// Excess
		(uint8_t []){0x09, 0x3D, 0x0A, 0xEA, 0xE5, 0xF6, 0xAA, 0xB0, 0x97, 0x50, 0x96, 0xFD, 0xE3, 0x1E, 0x1A, 0x21, 0xFA, 0x42, 0xED, 0xFC, 0x93, 0xDB, 0x31, 0x8A, 0x10, 0x64, 0x15, 0x6A, 0xCE, 0x81, 0xF5, 0x46, 0x71},
		
		// Signature
		(uint8_t []){0xCE, 0x1D, 0x97, 0xEF, 0x2F, 0x2C, 0xDB, 0x67, 0x64, 0xF0, 0x4C, 0x34, 0xE7, 0xAE, 0x95, 0x81, 0xED, 0xA4, 0xEA, 0x3C, 0xE8, 0x95, 0x5A, 0x5E, 0xA1, 0x5D, 0x83, 0x94, 0x78, 0x51, 0xA1, 0x9B, 0xAA, 0xB1, 0xFA, 0x40, 0x42, 0x19, 0x2C, 0x52, 0xA4, 0xE3, 0x96, 0x05, 0x0A, 0xA6, 0x34, 0x96, 0x16, 0xB3, 0x0F, 0x32, 0x51, 0x0F, 0x72, 0x09, 0x34, 0xEF, 0xEA, 0x50, 0x52, 0x76, 0x92, 0x1E},
		
		// Is genesis block kernel
		true
	);
	
	// Genesis block output
	const Output Consensus::GENESIS_BLOCK_OUTPUT(
	
		// Features
		Output::Features::COINBASE,
		
		// Commitment
		(uint8_t []){0x09, 0x05, 0xA2, 0xEB, 0xF3, 0x91, 0x3C, 0x7D, 0x37, 0x86, 0x60, 0xA7, 0xB6, 0x0E, 0x6B, 0xDA, 0x98, 0x3B, 0xE4, 0x51, 0xCB, 0x1D, 0xE8, 0x77, 0x9A, 0xD0, 0xF5, 0x1F, 0x4D, 0x2F, 0xB0, 0x79, 0xEA},
		
		// Is genesis block output
		true
	);
	
	// Genesis block rangeproof
	const Rangeproof Consensus::GENESIS_BLOCK_RANGEPROOF(
	
		// Length
		Crypto::BULLETPROOF_LENGTH,
		
		// Proof
		(uint8_t []){0xCF, 0x46, 0xF3, 0xC7, 0x65, 0xE7, 0x04, 0xCA, 0xAD, 0x39, 0xA9, 0xDD, 0xA4, 0x1F, 0x1D, 0x92, 0x1C, 0xA6, 0x78, 0x2F, 0x64, 0x69, 0x1A, 0xF7, 0x34, 0xB5, 0x6C, 0x96, 0xBE, 0x18, 0x18, 0xF9, 0x6D, 0x66, 0xC1, 0x12, 0x7C, 0x46, 0xD3, 0x35, 0x06, 0xA2, 0xF7, 0x95, 0xA5, 0x30, 0xDB, 0x55, 0x28, 0xD7, 0xDE, 0xB4, 0x0E, 0xA6, 0x84, 0x8B, 0x50, 0x87, 0x75, 0x67, 0x43, 0xE3, 0x51, 0x56, 0x0C, 0xC6, 0x46, 0x37, 0x9C, 0xAC, 0x44, 0x88, 0xB4, 0xDB, 0xEB, 0xDF, 0x55, 0xF8, 0x4A, 0xD7, 0x66, 0x01, 0xBE, 0x74, 0x85, 0x59, 0xEA, 0xB8, 0x9A, 0x9B, 0x1D, 0x66, 0x5B, 0xB0, 0xDF, 0x06, 0x95, 0xA7, 0xC9, 0xD6, 0x8E, 0xB7, 0x9A, 0x4C, 0x10, 0x3B, 0xB2, 0x39, 0x52, 0x91, 0xD7, 0x31, 0xB8, 0xB0, 0x96, 0x3A, 0x67, 0xD7, 0x3D, 0xF3, 0x0E, 0x02, 0xBB, 0x0A, 0x9D, 0xE5, 0x49, 0x44, 0xCC, 0xCF, 0x07, 0x7D, 0x01, 0xF0, 0x0B, 0xB2, 0x13, 0xB9, 0xC9, 0x5D, 0xD4, 0x5A, 0x12, 0x1E, 0xC0, 0x77, 0x9A, 0x5B, 0x32, 0x3D, 0xED, 0xC4, 0x69, 0xC3, 0x8E, 0x74, 0xF2, 0xED, 0x23, 0x8E, 0xC9, 0x3C, 0x18, 0xA1, 0xE0, 0x0C, 0xEA, 0x5B, 0x04, 0x34, 0xF1, 0x45, 0x58, 0x76, 0xEF, 0x90, 0x64, 0xE3, 0x38, 0xE2, 0x7A, 0x44, 0x03, 0x78, 0x98, 0x02, 0xC6, 0x32, 0x01, 0x87, 0x1A, 0xD3, 0xE9, 0x95, 0x02, 0xC1, 0x21, 0xE9, 0x66, 0xC2, 0x94, 0xEC, 0x87, 0xB3, 0x4B, 0xD8, 0x4B, 0xEA, 0x5B, 0xEC, 0xEB, 0xEA, 0x41, 0x4A, 0x6D, 0x8A, 0x1A, 0x74, 0xCC, 0x23, 0xE5, 0xD0, 0x1F, 0x85, 0x0B, 0x82, 0x08, 0xD2, 0xCA, 0x14, 0xB3, 0xF3, 0x50, 0x5A, 0x00, 0x30, 0x65, 0x39, 0x9A, 0xEB, 0x61, 0x84, 0xC6, 0xAB, 0x9E, 0x4D, 0x5C, 0xC4, 0xD6, 0xEC, 0x0E, 0x5F, 0x88, 0xEF, 0x13, 0xE9, 0xD7, 0xE8, 0x78, 0xE3, 0x65, 0x51, 0xA9, 0x31, 0xD6, 0xF2, 0x09, 0x4B, 0xCE, 0xF3, 0x61, 0xC1, 0x25, 0x25, 0x78, 0xE2, 0x70, 0x69, 0x3A, 0x5D, 0xF0, 0xC6, 0x70, 0x55, 0xDF, 0x47, 0x58, 0xC0, 0xA3, 0xE3, 0xFC, 0xFB, 0xE4, 0x74, 0xB9, 0x92, 0x81, 0x23, 0x70, 0x71, 0x7B, 0x5F, 0x6C, 0x64, 0xC5, 0x38, 0xC3, 0x0D, 0x28, 0x57, 0x0D, 0x84, 0xE6, 0xA7, 0x1C, 0x50, 0x80, 0xC4, 0x9D, 0xE3, 0xEA, 0x6D, 0xBD, 0xC9, 0x20, 0xA1, 0xD1, 0x28, 0x3E, 0x40, 0x48, 0x0A, 0x2D, 0xAA, 0xBF, 0xC0, 0xE1, 0x20, 0x69, 0x67, 0x82, 0xDB, 0x52, 0x8F, 0xF6, 0x1F, 0xDC, 0x10, 0x07, 0x4E, 0xFA, 0xF6, 0x90, 0x82, 0x03, 0xB7, 0x0F, 0x3E, 0x17, 0xC3, 0xA4, 0xD3, 0x63, 0x37, 0xC0, 0x5A, 0xF8, 0x16, 0x07, 0x4F, 0xF1, 0x13, 0x33, 0xB4, 0x95, 0xA1, 0x97, 0x92, 0x5B, 0xA3, 0x5B, 0x8D, 0x01, 0x4F, 0xAA, 0xA8, 0x72, 0x49, 0x0B, 0xBC, 0x28, 0x63, 0x75, 0x4D, 0x06, 0xA4, 0xD9, 0x74, 0xC2, 0xDB, 0x2E, 0x0E, 0x8D, 0xDF, 0x6F, 0xBF, 0xD4, 0x6C, 0x1C, 0x17, 0x96, 0xBE, 0x18, 0x06, 0xDD, 0x72, 0x9C, 0xC2, 0x7F, 0xE2, 0xF7, 0x3F, 0x66, 0xA5, 0x36, 0xC8, 0xD2, 0xCA, 0x27, 0xCC, 0xD2, 0x8C, 0xF0, 0x79, 0x94, 0x83, 0xC7, 0xF1, 0x60, 0x8D, 0x6E, 0x4C, 0x7B, 0xD2, 0xBB, 0xF5, 0x71, 0xC6, 0x30, 0x5A, 0x2F, 0x82, 0x7C, 0x26, 0xEB, 0xF7, 0x7F, 0x72, 0x80, 0xB7, 0x64, 0x9D, 0xFC, 0xE0, 0x78, 0xE5, 0xA6, 0xBF, 0x0B, 0x37, 0xB8, 0xEB, 0xF2, 0x14, 0xAA, 0xDF, 0x0E, 0xCE, 0xAA, 0x52, 0x09, 0x1C, 0x32, 0xA7, 0x31, 0x51, 0x1A, 0xD4, 0x55, 0xDE, 0x56, 0x56, 0x00, 0x14, 0xBE, 0xF8, 0xA4, 0xD7, 0x17, 0x92, 0x9E, 0x38, 0xE3, 0xCD, 0xCD, 0x51, 0x59, 0x35, 0x2E, 0x61, 0x61, 0xF0, 0x1F, 0x30, 0xA7, 0x8C, 0x52, 0x41, 0xC8, 0xCD, 0x84, 0x29, 0x13, 0x51, 0x25, 0xD3, 0xAF, 0x59, 0x99, 0x66, 0x2E, 0xE1, 0x12, 0xBE, 0x9B, 0x0C, 0x60, 0xB7, 0xED, 0xDA, 0x92, 0xA6, 0x60, 0x0E, 0xDE, 0x16, 0x94, 0xFF, 0x89, 0x76, 0x91, 0x0A, 0xE7, 0x1B, 0xD1, 0x23, 0xCC, 0x1C, 0x92, 0x8E, 0xA1, 0xCF, 0x6D, 0x9D, 0x7A, 0x9E, 0x73, 0x8B, 0x7C, 0x7B, 0x09, 0x59, 0x2B, 0x4B, 0x5A, 0x11, 0x44, 0x9C, 0x38, 0xAF, 0x0E, 0xD4, 0x08, 0xDF, 0xE9, 0x51, 0x69, 0x1A, 0xE7, 0x3E, 0xA8, 0x3E, 0xF2, 0xA0, 0x96, 0xBC, 0x0E, 0x28, 0x6B, 0x07, 0x02, 0xE5, 0xEE, 0x76, 0xC4, 0xEF, 0x2F, 0x38, 0x1A, 0x95, 0x16, 0x00, 0x3D, 0xF1, 0xA3, 0x86, 0xA2, 0x73, 0x75, 0x12, 0xB9, 0x95, 0xE7, 0x60, 0x25, 0x53, 0x79, 0x09, 0xE7, 0x22, 0x91, 0xDE, 0xDA, 0xC7, 0x9E, 0x0A, 0x42, 0xC4, 0xE5, 0x86, 0x67, 0x0E, 0x05, 0xE1, 0x73, 0x9A, 0xB7, 0x16, 0x1C, 0x80, 0x1C, 0x14, 0x4A, 0xF8, 0x14, 0x11, 0xB8, 0x0D, 0x96, 0x72, 0x2E, 0x3D, 0xFD, 0x8F, 0xB8, 0x6F, 0x42, 0x24, 0x6B, 0xD2, 0x32, 0x26, 0xA7, 0x64, 0xE0},
		
		// Is genesis block rangeproof
		true
	);
	
// Otherwise
#else

	// Genesis block header
	const Header Consensus::GENESIS_BLOCK_HEADER(
	
		// Version
		1,
	
		// Height
		0,
	
		// Timestamp
		chrono::time_point<chrono::system_clock>(chrono::seconds(1573462800)),
		
		// Previous block hash
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		
		// Previous header root
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xF2, 0xFB, 0x2E, 0xE7, 0x49, 0x92, 0x3A, 0x81, 0x31, 0x02, 0x8A, 0xEA, 0xE6, 0x37, 0x07, 0x0B, 0x0B, 0x41, 0x45, 0x61, 0x7D, 0x42},
		
		// Output root
		(uint8_t []){0x2D, 0x67, 0x2C, 0x22, 0x8F, 0x88, 0x36, 0x46, 0xD7, 0x5E, 0x73, 0xF1, 0xB9, 0x36, 0x99, 0x1F, 0xDF, 0xB1, 0x1B, 0xB1, 0x77, 0xEC, 0xA4, 0x51, 0x58, 0x7F, 0x97, 0xDE, 0xA1, 0xA4, 0xF9, 0x94},
		
		// Rangeproof root
		(uint8_t []){0x34, 0x60, 0x12, 0x3E, 0x2E, 0x24, 0xC9, 0xDF, 0x65, 0xCD, 0x7A, 0x8D, 0x0E, 0x13, 0x84, 0x72, 0x4C, 0x23, 0xC8, 0x8C, 0x71, 0xB0, 0xCB, 0x32, 0xD8, 0x90, 0x85, 0x46, 0x48, 0xC7, 0x63, 0x7A},
		
		// Kernel root
		(uint8_t []){0xCD, 0x3E, 0x07, 0xCF, 0xF2, 0xC0, 0xF8, 0xE4, 0x34, 0xC3, 0x0A, 0x47, 0xD6, 0x23, 0x12, 0x70, 0xD1, 0x2D, 0x42, 0x63, 0x8C, 0x0A, 0x7F, 0xD2, 0xC5, 0xC3, 0x12, 0x5D, 0x51, 0x92, 0x0D, 0x00},
		
		// Total kernel offset
		(uint8_t []){0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
		
		// Output Merkle mountain range size
		1,
		
		// Kernel Merkle mountain range size
		1,
		
		// Total difficulty
		1000000,
		
		// Secondary scaling
		1856,
		
		// Nonce
		57,
		
		// Edge bits
		Consensus::C29_EDGE_BITS,
		
		// Proof nonces
		(uint64_t []){7791384, 18725569, 25781440, 34244982, 37735006, 50818018, 71198333, 101194282, 128077740, 130711994, 140235954, 169405337, 169483469, 205312464, 231543491, 268105396, 269131498, 289412425, 313057984, 318152989, 347763503, 353494235, 377703230, 393399875, 409267066, 410265896, 419833577, 424585144, 447415663, 449338161, 455123370, 474062893, 488026600, 491955742, 492120147, 492287857, 497798535, 515160542, 520873408, 521363243, 532149389, 533910346}
	);
	
	// Genesis block kernel
	const Kernel Consensus::GENESIS_BLOCK_KERNEL(
	
		// Features
		Kernel::Features::COINBASE,
		
		// Fee
		0,
		
		// Lock height
		0,
		
		// Relative height
		0,
		
		// Excess
		(uint8_t []){0x08, 0xB6, 0x59, 0xFD, 0xE3, 0xA4, 0x12, 0x84, 0x81, 0x9F, 0x45, 0x41, 0x58, 0x90, 0x33, 0x02, 0x72, 0xEF, 0xEF, 0x7E, 0xF9, 0x91, 0xF8, 0x33, 0xA6, 0x4B, 0x74, 0x6B, 0xE8, 0x02, 0xC8, 0xFD, 0x77},
		
		// Signature
		(uint8_t []){0xBD, 0x34, 0x3C, 0x89, 0xAC, 0xA0, 0x86, 0x45, 0x11, 0x2F, 0x52, 0x56, 0xA9, 0x88, 0x04, 0xF0, 0x68, 0xBC, 0x08, 0xB9, 0x5A, 0xAA, 0xDC, 0x5A, 0x58, 0xB1, 0xDE, 0xAB, 0xC6, 0xF4, 0x95, 0x0F, 0xEE, 0x5B, 0x98, 0xEA, 0xF8, 0x22, 0x48, 0xAF, 0xD5, 0x34, 0xB3, 0x1D, 0xA5, 0x71, 0x46, 0xA7, 0x1E, 0x9F, 0xA3, 0x2D, 0x43, 0x02, 0x88, 0xA9, 0xF8, 0xC8, 0x5A, 0x56, 0x46, 0xC0, 0x49, 0x25},
		
		// Is genesis block kernel
		true
	);
	
	// Genesis block output
	const Output Consensus::GENESIS_BLOCK_OUTPUT(
	
		// Features
		Output::Features::COINBASE,
		
		// Commitment
		(uint8_t []){0x08, 0x9D, 0xFC, 0xAC, 0x47, 0x5C, 0x94, 0xC9, 0x78, 0x86, 0x1B, 0x3D, 0xBE, 0xF1, 0xE3, 0x7B, 0x03, 0x8C, 0xC1, 0x3F, 0x9F, 0x78, 0xDE, 0x9A, 0x4E, 0x14, 0xF3, 0x1E, 0xD3, 0x6E, 0x7A, 0x54, 0xC9},
		
		// Is genesis block output
		true
	);
	
	// Genesis block rangeproof
	const Rangeproof Consensus::GENESIS_BLOCK_RANGEPROOF(
	
		// Length
		Crypto::BULLETPROOF_LENGTH,
		
		// Proof
		(uint8_t []){0x27, 0xBD, 0x9A, 0xFF, 0x56, 0x3F, 0x46, 0x42, 0xE7, 0x7D, 0x99, 0xBE, 0xDD, 0xCE, 0xC6, 0x6C, 0x32, 0x4C, 0x8E, 0x07, 0xDE, 0xF8, 0xDE, 0x62, 0xF7, 0xF6, 0x95, 0x68, 0xF3, 0x30, 0x92, 0x00, 0x93, 0x51, 0x43, 0x6A, 0x44, 0xB4, 0xE2, 0xD3, 0x86, 0x0F, 0x5D, 0x8F, 0x9D, 0x74, 0x4C, 0x76, 0xD4, 0x1F, 0xA7, 0xD9, 0x2E, 0xD6, 0x38, 0x50, 0x67, 0x07, 0x2B, 0xD6, 0x49, 0xB4, 0x97, 0xDA, 0x06, 0x45, 0x51, 0x03, 0x13, 0xCB, 0xD2, 0x20, 0x4E, 0xDE, 0x79, 0x53, 0x5D, 0x23, 0x6C, 0x0F, 0x7A, 0x91, 0x83, 0xB8, 0x58, 0x2B, 0x70, 0xFF, 0xA0, 0x0D, 0x96, 0xEC, 0xC2, 0xFD, 0x7F, 0x76, 0x21, 0x92, 0x67, 0x62, 0xCB, 0xF7, 0x80, 0x46, 0x8E, 0x4D, 0xAA, 0xBD, 0xA1, 0x39, 0xBA, 0xBE, 0x21, 0x25, 0x0F, 0xF5, 0x70, 0x87, 0x55, 0x90, 0x6D, 0xED, 0xBC, 0xFF, 0x63, 0x46, 0x53, 0x96, 0x27, 0x73, 0x0D, 0x86, 0xB3, 0x40, 0xA2, 0x80, 0x29, 0xB0, 0x7B, 0xC3, 0xAE, 0x14, 0x65, 0xAE, 0xFB, 0xA8, 0xB0, 0x9D, 0x8E, 0x19, 0xBD, 0xC4, 0xEB, 0xE6, 0xA2, 0x27, 0x97, 0x05, 0xCC, 0x72, 0xCB, 0xAA, 0xD6, 0xCD, 0x6A, 0x60, 0xFA, 0x2C, 0xEE, 0x27, 0x2C, 0x8D, 0x75, 0x66, 0xCD, 0x3D, 0xB5, 0x69, 0x36, 0x26, 0x93, 0xE1, 0x7F, 0x71, 0x25, 0x38, 0x2A, 0xF4, 0x8F, 0xD8, 0x79, 0x3B, 0x81, 0x6F, 0x0B, 0xFC, 0xCB, 0x8A, 0x37, 0x97, 0x68, 0x1D, 0x13, 0xD0, 0xFB, 0x73, 0x34, 0x52, 0xC0, 0xF0, 0x4F, 0xB7, 0xF5, 0xE7, 0x9C, 0xD1, 0x76, 0x0D, 0x4B, 0x1D, 0xB9, 0x95, 0xBA, 0xA8, 0xB4, 0xCC, 0x0E, 0x3B, 0xB9, 0x81, 0x3C, 0x3E, 0xC6, 0x03, 0x1B, 0x02, 0x57, 0x73, 0x27, 0x56, 0xDC, 0x97, 0x9E, 0xBF, 0xCA, 0x2B, 0xAD, 0x59, 0xED, 0xF4, 0xA1, 0x63, 0x8A, 0xC3, 0x0B, 0x44, 0x50, 0x6C, 0x54, 0x23, 0xEC, 0x47, 0x46, 0x64, 0x3D, 0x56, 0x6C, 0x16, 0xA2, 0x95, 0xA7, 0x05, 0xD2, 0x88, 0x0B, 0xA5, 0x3A, 0x34, 0x30, 0xD8, 0xE4, 0x61, 0xF6, 0x64, 0x18, 0x44, 0x3D, 0xA4, 0xEA, 0x34, 0x0B, 0x67, 0x23, 0xF2, 0xE9, 0xFB, 0xD6, 0xB5, 0x3D, 0x67, 0x94, 0x80, 0xA7, 0xFB, 0x72, 0x26, 0xC4, 0x5A, 0x9B, 0xB5, 0x29, 0xA9, 0xCB, 0x1D, 0xA6, 0x0D, 0x7B, 0x53, 0x96, 0x4C, 0x37, 0x71, 0xA2, 0xA6, 0x93, 0x0E, 0x50, 0x4B, 0x0D, 0x6D, 0xB2, 0xE2, 0x06, 0x03, 0x7E, 0x56, 0x72, 0x56, 0x27, 0x97, 0x41, 0x18, 0x39, 0xB5, 0xD8, 0xAE, 0x3D, 0x9C, 0x66, 0xD2, 0x0B, 0x4A, 0x56, 0x47, 0x03, 0xDB, 0xCB, 0xEF, 0xDA, 0x05, 0x41, 0x7F, 0xD2, 0x35, 0x08, 0xBC, 0x70, 0xB9, 0x13, 0xAD, 0xCE, 0x03, 0xBA, 0x56, 0xE9, 0x2A, 0x23, 0x63, 0x49, 0xC6, 0x9A, 0x29, 0xEC, 0xF2, 0x0E, 0x73, 0x1C, 0x64, 0xB6, 0x2D, 0x3A, 0x80, 0x46, 0xD4, 0x64, 0x9D, 0xEE, 0x41, 0xE8, 0xC0, 0x0D, 0x2F, 0x1D, 0x33, 0xB0, 0x89, 0x0F, 0xA7, 0x2F, 0x61, 0xDE, 0x4E, 0xF0, 0x5E, 0x58, 0x84, 0x6C, 0x63, 0x7F, 0xA0, 0xF6, 0x11, 0xBA, 0x4C, 0x74, 0xCD, 0xAD, 0x01, 0x4A, 0x29, 0xE0, 0x41, 0x52, 0xDE, 0xF7, 0x94, 0x4A, 0x52, 0xA9, 0x05, 0x06, 0x29, 0xA9, 0xCC, 0x34, 0x52, 0xCC, 0x99, 0x63, 0xA1, 0xC3, 0x20, 0x9F, 0x50, 0xA9, 0x0C, 0x63, 0x68, 0x44, 0x5D, 0xE6, 0x2F, 0x5F, 0x43, 0x09, 0x99, 0x63, 0xB7, 0x02, 0x0C, 0x69, 0xDA, 0x49, 0xA2, 0xCE, 0x54, 0x95, 0x60, 0xC0, 0xF9, 0xEB, 0xB6, 0x14, 0x89, 0x03, 0x2E, 0x08, 0x5F, 0x6D, 0x12, 0x9F, 0x9A, 0x72, 0x09, 0x07, 0xC0, 0xB4, 0xEC, 0x7A, 0x50, 0x52, 0x8E, 0x91, 0xE2, 0xF7, 0xD1, 0xAA, 0x84, 0x8E, 0x41, 0xA6, 0x44, 0xEF, 0xAF, 0x57, 0x3D, 0x98, 0x7F, 0x12, 0x15, 0x46, 0x81, 0xAE, 0x92, 0x13, 0x1C, 0xD5, 0x73, 0x0A, 0x42, 0x3E, 0x38, 0x14, 0xAC, 0x99, 0x97, 0x1B, 0x4E, 0x5F, 0xA9, 0xAA, 0x45, 0x36, 0xF7, 0xC9, 0xB3, 0xEA, 0x9D, 0xA8, 0xDE, 0xC1, 0xD2, 0x32, 0x5B, 0x4F, 0xF2, 0x60, 0x45, 0xA3, 0x3C, 0xF6, 0xB7, 0x5A, 0x42, 0xC4, 0x44, 0xE2, 0xDF, 0x64, 0xB7, 0x08, 0xA5, 0x00, 0x32, 0x6A, 0xE8, 0xC5, 0xCA, 0x8E, 0x81, 0xC1, 0xC1, 0x41, 0xEC, 0xBE, 0x03, 0xE4, 0x89, 0x1F, 0x0E, 0x85, 0xF1, 0xFE, 0xC0, 0xC5, 0x65, 0x6C, 0x2E, 0xD1, 0xA8, 0x3B, 0x09, 0xA0, 0xAB, 0x03, 0x08, 0xD4, 0x42, 0x7B, 0xDA, 0x06, 0xE7, 0xE8, 0xD7, 0xCF, 0x3E, 0x35, 0x82, 0x22, 0xED, 0x50, 0x0D, 0x0A, 0x5D, 0xD6, 0xA4, 0x9E, 0x2F, 0x27, 0x65, 0x34, 0xE4, 0x00, 0x26, 0xCD, 0x52, 0x17, 0x27, 0x29, 0x2A, 0xDD, 0x00, 0x64, 0x89, 0x1A, 0x2F, 0x49, 0xD6, 0x6A, 0x44, 0xFF, 0xAA, 0xFA, 0xEC, 0x02, 0x66, 0x84, 0x59, 0x8D, 0x2A, 0x22, 0x02, 0x1D, 0xBB, 0x05, 0xBD, 0x99, 0x11, 0xEA, 0x20, 0x90, 0x95, 0xD3, 0xA4, 0xBC},
		
		// Is genesis block rangeproof
		true
	);
#endif

// Maximum block weight
const uint64_t Consensus::MAXIMUM_BLOCK_WEIGHT = 40000;

// Block input weight
const uint64_t Consensus::BLOCK_INPUT_WEIGHT = 1;

// Block output weight
const uint64_t Consensus::BLOCK_OUTPUT_WEIGHT = 21;

// Block kernel weight
const uint64_t Consensus::BLOCK_KERNEL_WEIGHT = 3;

// Block output length (mwc-node uses 1 + 33 + 674 instead of 1 + 33 + 675)
const size_t Consensus::BLOCK_OUTPUT_LENGTH = sizeof(Output::Features) + Crypto::COMMITMENT_LENGTH + Crypto::BULLETPROOF_LENGTH - 1;

// Maximum block length
const size_t Consensus::MAXIMUM_BLOCK_LENGTH = Consensus::MAXIMUM_BLOCK_WEIGHT / Consensus::BLOCK_OUTPUT_WEIGHT * Consensus::BLOCK_OUTPUT_LENGTH;

// Difficulty adjustment window
const uint64_t Consensus::DIFFICULTY_ADJUSTMENT_WINDOW = Consensus::HOUR_HEIGHT;

// C29 headers adjustment damp factor
const uint64_t Consensus::C29_HEADERS_ADJUSTMENT_DAMP_FACTOR = 13;

// C29 headers adjustment clamp factor
const uint64_t Consensus::C29_HEADERS_ADJUSTMENT_CLAMP_FACTOR = 2;

// Minimum secondary scaling
const uint32_t Consensus::MINIMUM_SECONDARY_SCALING = 13;

// Window duration adjustment damp factor
const uint64_t Consensus::WINDOW_DURATION_ADJUSTMENT_DAMP_FACTOR = 3;

// Window duration adjustment clamp factor
const uint64_t Consensus::WINDOW_DURATION_ADJUSTMENT_CLAMP_FACTOR = 2;

// Minimum difficulty
const uint64_t Consensus::MINIMUM_DIFFICULTY = 3;

// State sync height threshold
const uint64_t Consensus::STATE_SYNC_HEIGHT_THRESHOLD = 2 * DAY_HEIGHT;

// Cut through horizon
const uint64_t Consensus::CUT_THROUGH_HORIZON = WEEK_HEIGHT;

// Coinbase maturity
const uint64_t Consensus::COINBASE_MATURITY = DAY_HEIGHT;

// Check if floonet
#ifdef FLOONET

	// C31 hard fork height
	const uint64_t Consensus::C31_HARD_FORK_HEIGHT = 270000;
	
	// Banned block hashes
	const uint8_t Consensus::BANNED_BLOCK_HASHES[][Crypto::BLAKE2B_HASH_LENGTH] = {};

// Otherwise
#else

	// C31 hard fork height
	const uint64_t Consensus::C31_HARD_FORK_HEIGHT = 202500;
	
	// Banned block hashes
	const uint8_t Consensus::BANNED_BLOCK_HASHES[][Crypto::BLAKE2B_HASH_LENGTH] = {
		{0x00, 0x02, 0x04, 0x40, 0xA4, 0x01, 0x08, 0x6E, 0x57, 0xE1, 0xB7, 0xA9, 0x2E, 0xBB, 0x02, 0x77, 0xC7, 0xF7, 0xFD, 0x47, 0xA3, 0x82, 0x69, 0xEC, 0xC6, 0x78, 0x9C, 0x2A, 0x80, 0x33, 0x37, 0x25}
	};
#endif

// Base edge bits
const uint8_t Consensus::BASE_EDGE_BITS = 24;

// Starting C29 proof of work ratio
const int Consensus::STARTING_C29_PROOF_OF_WORK_RATIO = 45;

// C29 proof of work duration
const uint64_t Consensus::C29_PROOF_OF_WORK_DURATION = Consensus::YEAR_HEIGHT;


// Supporting function implementation

// Get header version
uint16_t Consensus::getHeaderVersion(const uint64_t height) {

	// Check if height is before the C31 hard fork height
	if(height < C31_HARD_FORK_HEIGHT) {
	
		// Return one
		return 1;
	}
	
	// Otherwise
	else {
	
		// Return two
		return 2;
	}
}

// Get block weight
uint64_t Consensus::getBlockWeight(const uint64_t numberOfInputs, const uint64_t numberOfOutputs, const uint64_t numberOfKernels) {

	// Get input weight
	const uint64_t inputsWeight = SaturateMath::multiply(numberOfInputs, BLOCK_INPUT_WEIGHT);
	
	// Get outputs weight
	const uint64_t outputsWeight = SaturateMath::multiply(numberOfOutputs, BLOCK_OUTPUT_WEIGHT);
	
	// Get kernels weight
	const uint64_t kernelsWeight = SaturateMath::multiply(numberOfKernels, BLOCK_KERNEL_WEIGHT);
	
	// Return sum of weights
	return SaturateMath::add(SaturateMath::add(inputsWeight, outputsWeight), kernelsWeight);
}

// Is block hash banned
bool Consensus::isBlockHashBanned(const uint8_t blockHash[Crypto::BLAKE2B_HASH_LENGTH]) {

	// Go through all banned block hashes
	for(size_t i = 0; i < (sizeof(BANNED_BLOCK_HASHES) ? sizeof(BANNED_BLOCK_HASHES) / sizeof(BANNED_BLOCK_HASHES[0]) : 0); ++i) {
	
		// Check if block hash is banned
		if(!memcmp(blockHash, BANNED_BLOCK_HASHES[i], sizeof(BANNED_BLOCK_HASHES[i]))) {
		
			// Return true
			return true;
		}
	}
	
	// Return false
	return false;
}

// Get graph weight
uint64_t Consensus::getGraphWeight(const uint64_t height, const uint8_t edgeBits) {

	// Check if height is before the C31 hard fork height or edge bits are at most C31
	if(height < C31_HARD_FORK_HEIGHT || edgeBits <= C31_EDGE_BITS) {
	
		// Return graph weight
		return (static_cast<uint64_t>(2) << (edgeBits - BASE_EDGE_BITS)) * edgeBits;
	}
	
	// Otherwise
	else {
	
		// Return one
		return 1;
	}
}

// Get C29 proof of work ratio
uint64_t Consensus::getC29ProofOfWorkRatio(const uint64_t height) {

	// Return C29 proof of work ratio
	return SaturateMath::subtract(STARTING_C29_PROOF_OF_WORK_RATIO, height / (C29_PROOF_OF_WORK_DURATION / STARTING_C29_PROOF_OF_WORK_RATIO));
}

// Get maximum difficulty
uint64_t Consensus::getMaximumDifficulty(const Header &header) {

	// Initialize scaling
	uint64_t scaling;

	// Check if header uses C29 edge bits
	if(header.getEdgeBits() == C29_EDGE_BITS) {
	
		// Set scaling to header's secondary scaling
		scaling = header.getSecondaryScaling();
	}
	
	// Otherwise
	else {
	
		// Set scaling to header's graph weight
		scaling = getGraphWeight(header.getHeight(), header.getEdgeBits());
	}
	
	// Get header's block hash
	const array blockHash = header.getBlockHash();
	
	// Get block hash as number
	const uint64_t blockHashAsNumber = Common::bigEndianToHostByteOrder(*reinterpret_cast<const uint64_t *>(blockHash.data()));
	
	// Get maximum difficulty
	const unsigned __int128 maximumDifficulty = (static_cast<unsigned __int128>(scaling) << 64) / max(static_cast<uint64_t>(1), blockHashAsNumber);
	
	// Return maximum difficulty
	return (maximumDifficulty <= UINT64_MAX) ? max(static_cast<uint64_t>(maximumDifficulty), static_cast<uint64_t>(1)) : UINT64_MAX;
}

// Get coinbase reward
uint64_t Consensus::getCoinbaseReward(const uint64_t height) {

	// Check if at the genesis block
	if(height == GENESIS_BLOCK_HEADER.getHeight()) {
	
		// Return genesis block reward
		return getEpochReward(0);
	}
	
	// Check if before the second epoch
	if(height < getEpochBlockOffset(2)) {
	
		// Return first epoch reward
		return getEpochReward(1);
	}
	// Check if before the third epoch
	if(height < getEpochBlockOffset(3)) {
	
		// Return second epoch reward
		return getEpochReward(2);
	}
	// Check if before the fourth epoch
	if(height < getEpochBlockOffset(4)) {
	
		// Return third epoch reward
		return getEpochReward(3);
	}
	// Check if before the fifth epoch
	if(height < getEpochBlockOffset(5)) {
	
		// Return fourth epoch reward
		return getEpochReward(4);
	}
	// Check if before the sixth epoch
	if(height < getEpochBlockOffset(6)) {
	
		// Return fifth epoch reward
		return getEpochReward(5);
	}
	// Check if before the seventh epoch
	if(height < getEpochBlockOffset(7)) {
	
		// Return sixth epoch reward
		return getEpochReward(6);
	}
	// Check if before the eighth epoch
	if(height < getEpochBlockOffset(8)) {
	
		// Return seventh epoch reward
		return getEpochReward(7);
	}
	// Check if before the ninth epoch
	if(height < getEpochBlockOffset(9)) {
	
		// Return eighth epoch reward
		return getEpochReward(8);
	}
	// Check if before the tenth epoch
	if(height < getEpochBlockOffset(10)) {
	
		// Return ninth epoch reward
		return getEpochReward(9);
	}
	// Check if before the eleventh epoch
	if(height < getEpochBlockOffset(11)) {
	
		// Return tenth epoch reward
		return getEpochReward(10);
	}
	
	// Check if in the eleventh epoch
	if(height < getEpochBlockOffset(11) + getEpochDuration(11)) {
	
		// Return eleventh epoch reward
		return getEpochReward(11);
	}
	
	// Check if in the twelfth epoch
	if(height == getEpochBlockOffset(11) + getEpochDuration(11)) {
	
		// Return twelfth epoch reward
		return getEpochReward(12);
	}
	
	// Return zero
	return 0;
}

// Get total number of coinbase rewards
uint64_t Consensus::getTotalNumberOfCoinbaseRewards(const uint64_t height) {

	// Set total number of coinbase rewards to the genesis block reward
	uint64_t totalNumberOfCoinbaseRewards = getEpochReward(0);
	
	// Check if before the second epoch
	if(height < getEpochBlockOffset(2)) {
	
		// Add first epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += height * getEpochReward(1);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add first epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(1) * (getEpochBlockOffset(2) - 1);
	
	// Check if before the third epoch
	if(height < getEpochBlockOffset(3)) {
	
		// Add second epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(2)) * getEpochReward(2);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add second epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(2) * (getEpochBlockOffset(3) - getEpochBlockOffset(2));
	
	// Check if before the fourth epoch
	if(height < getEpochBlockOffset(4)) {
	
		// Add third epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(3)) * getEpochReward(3);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add third epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(3) * (getEpochBlockOffset(4) - getEpochBlockOffset(3));
	
	// Check if before the fifth epoch
	if(height < getEpochBlockOffset(5)) {
	
		// Add fourth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(4)) * getEpochReward(4);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add fourth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(4) * (getEpochBlockOffset(5) - getEpochBlockOffset(4));
	
	// Check if before the sixth epoch
	if(height < getEpochBlockOffset(6)) {
	
		// Add fifth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(5)) * getEpochReward(5);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add fifth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(5) * (getEpochBlockOffset(6) - getEpochBlockOffset(5));
	
	// Check if before the seventh epoch
	if(height < getEpochBlockOffset(7)) {
	
		// Add sixth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(6)) * getEpochReward(6);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add sixth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(6) * (getEpochBlockOffset(7) - getEpochBlockOffset(6));
	
	// Check if before the eighth epoch
	if(height < getEpochBlockOffset(8)) {
	
		// Add seventh epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(7)) * getEpochReward(7);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add seventh epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(7) * (getEpochBlockOffset(8) - getEpochBlockOffset(7));
	
	// Check if before the ninth epoch
	if(height < getEpochBlockOffset(9)) {
	
		// Add eighth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(8)) * getEpochReward(8);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add eighth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(8) * (getEpochBlockOffset(9) - getEpochBlockOffset(8));
	
	// Check if before the tenth epoch
	if(height < getEpochBlockOffset(10)) {
	
		// Add ninth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(9)) * getEpochReward(9);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add ninth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(9) * (getEpochBlockOffset(10) - getEpochBlockOffset(9));
	
	// Check if before the eleventh epoch
	if(height < getEpochBlockOffset(11)) {
	
		// Add tenth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(10)) * getEpochReward(10);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add tenth epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(10) * (getEpochBlockOffset(11) - getEpochBlockOffset(10));
	
	// Check if in the eleventh epoch
	if(height < getEpochBlockOffset(11) + getEpochDuration(11)) {
	
		// Add eleventh epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += ((height + 1) - getEpochBlockOffset(11)) * getEpochReward(11);
	
		// Return total number of coinbase rewards
		return totalNumberOfCoinbaseRewards;
	}
	
	// Add eleventh epoch rewards to the total number of coinbase rewards
	totalNumberOfCoinbaseRewards += getEpochReward(11) * getEpochDuration(11);
	
	// Check if in the twelfth epoch
	if(height >= getEpochBlockOffset(11) + getEpochDuration(11)) {
	
		// Add twelfth epoch rewards to the total number of coinbase rewards
		totalNumberOfCoinbaseRewards += getEpochReward(12);
	}
	
	// Return total number of coinbase rewards
	return totalNumberOfCoinbaseRewards;
}

// Get epoch reward
uint64_t Consensus::getEpochReward(const uint8_t epoch) {

	// Check epoch
	switch(epoch) {
	
		// Zero
		case 0:
		
			// Return epoch reward
			return 10000000000000000 + 41800000;
		
			// Break
			break;
		
		// One
		case 1:
		
			// Return epoch reward
			return 2380952380;
		
			// Break
			break;
		
		// Two
		case 2:
		
			// Return epoch reward
			return 600000000;
		
			// Break
			break;
		
		// Three
		case 3:
		
			// Return epoch reward
			return 450000000;
		
			// Break
			break;
		
		// Four
		case 4:
		
			// Return epoch reward
			return 300000000;
		
			// Break
			break;
		
		// Five
		case 5:
		
			// Return epoch reward
			return 250000000;
		
			// Break
			break;
		
		// Six
		case 6:
		
			// Return epoch reward
			return 200000000;
		
			// Break
			break;
		
		// Seven
		case 7:
		
			// Return epoch reward
			return 150000000;
		
			// Break
			break;
		
		// Eight
		case 8:
		
			// Return epoch reward
			return 100000000;
		
			// Break
			break;
		
		// Nine
		case 9:
		
			// Return epoch reward
			return 50000000;
		
			// Break
			break;
		
		// Ten
		case 10:
		
			// Return epoch reward
			return 25000000;
		
			// Break
			break;
		
		// Eleven
		case 11:
		
			// Return epoch reward
			return 10000000;
		
			// Break
			break;
		
		// Default
		default:
		
			// Return epoch reward
			return 2211980;
		
			// Break
			break;
	}
}

// Get epoch block offset
uint64_t Consensus::getEpochBlockOffset(const uint8_t epoch) {

	// Set epoch block offset to the C31 hard fork height
	uint64_t epochBlockOffset = C31_HARD_FORK_HEIGHT;
	
	// Check if at the second epoch or newer
	if(epoch >= 2) {
	
		// Check if floonet
		#ifdef FLOONET
		
			// Add day height to the epoch block offset
			epochBlockOffset += DAY_HEIGHT;
		
		// Otherwise
		#else
		
			// Add week height to the epoch block offset
			epochBlockOffset += WEEK_HEIGHT;
		#endif
	}
	
	// Go through all remaining epochs
	for(uint8_t i = 3; i <= epoch; ++i) {
	
		// Add epoch duration to epoch block offset
		epochBlockOffset += getEpochDuration(i - 1);
	}
	
	// Return epoch block offset
	return epochBlockOffset;
}

// Get epoch duration
uint64_t Consensus::getEpochDuration(const uint8_t epoch) {

	// Check epoch
	switch(epoch) {
	
		// Two
		case 2:
		
			// Check if floonet
			#ifdef FLOONET
			
				// Return epoch duration
				return DAY_HEIGHT;
			
			// Otherwise
			#else
			
				// Return epoch duration
				return 120 * DAY_HEIGHT;
			#endif
		
			// break
			break;
		
		// Three
		case 3:
		
			// Check if floonet
			#ifdef FLOONET
			
				// Return epoch duration
				return DAY_HEIGHT;
			
			// Otherwise
			#else
			
				// Return epoch duration
				return 60 * DAY_HEIGHT;
			#endif
		
			// break
			break;
		
		// Four
		case 4:
		
			// Return epoch duration
			return 120 * DAY_HEIGHT;
		
			// Break
			break;
		
		// Five
		case 5:
		
			// Return epoch duration
			return 180 * DAY_HEIGHT;
		
			// Break
			break;
		
		// Six
		case 6:
		
			// Return epoch duration
			return 180 * DAY_HEIGHT;
		
			// Break
			break;
		
		// Seven
		case 7:
		
			// Return epoch duration
			return YEAR_HEIGHT;
		
			// Break
			break;
		
		// Eight
		case 8:
		
			// Return epoch duration
			return YEAR_HEIGHT;
		
			// Break
			break;
		
		// Nine
		case 9:
		
			// Return epoch duration
			return 6 * YEAR_HEIGHT;
		
			// Break
			break;
		
		// Ten
		case 10:
		
			// Return epoch duration
			return 10 * YEAR_HEIGHT;
		
			// Break
			break;
		
		// Default
		default:
		
			// Return epoch duration
			return 876349148;
		
			// Break
			break;
	}
}
