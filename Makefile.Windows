# Program parameters
NAME = "MWC Validation Node"
VERSION = "0.2.0"
CC = "x86_64-w64-mingw32-g++-posix"
STRIP = "x86_64-w64-mingw32-strip"
CFLAGS = -D PRUNE_HEADERS -D PRUNE_KERNELS -D PRUNE_RANGEPROOFS -I "blake2/include" -I "./secp256k1-zkp/dist/include" -I "./zlib/dist/include" -I "./libzip/dist/include" -I "./croaring/dist/include" -static-libstdc++ -static-libgcc -O3 -Wall -Wextra -Wno-unknown-warning-option -Wno-vla -Wno-vla-cxx-extension -Wno-unused-parameter -Wno-missing-field-initializers -Wno-unqualified-std-cast-call -std=c++2a -finput-charset=UTF-8 -fexec-charset=UTF-8 -funsigned-char -ffunction-sections -fdata-sections -D PROGRAM_NAME=$(NAME) -D PROGRAM_VERSION=$(VERSION)
LIBS = -L "./secp256k1-zkp/dist/lib" -Wl,-Bstatic -lsecp256k1 -Wl,-Bdynamic -L "./libzip/dist/lib" -Wl,-Bstatic -lzip -Wl,-Bdynamic -L "./zlib/dist/lib" -Wl,-Bstatic -lz -Wl,-Bdynamic -L "./croaring/dist/lib" -Wl,-Bstatic -lroaring -Wl,-Bdynamic -Wl,-Bstatic -lstdc++ -lpthread -Wl,-Bdynamic -lws2_32
SRCS = "./blake2/include/blake2b-ref.c" "./block.cpp" "./common.cpp" "./consensus.cpp" "./crypto.cpp" "./header.cpp" "./input.cpp" "./kernel.cpp" "./main.cpp" "./mempool.cpp" "./message.cpp" "./node.cpp" "./output.cpp" "./peer.cpp" "./proof_of_work.cpp" "./rangeproof.cpp" "./saturate_math.cpp" "./transaction.cpp"
PROGRAM_NAME = $(subst $\",,$(NAME))

# Check if using floonet
ifeq ($(FLOONET),1)

	# Enable floonet
	CFLAGS += -D ENABLE_FLOONET
endif

# Check if using tor
ifeq ($(TOR),1)

	# Enable tor
	CFLAGS += -D ENABLE_TOR
endif

# Make
all:
	$(CC) $(CFLAGS) -o "./$(PROGRAM_NAME).exe" $(SRCS) $(LIBS)
	$(STRIP) "./$(PROGRAM_NAME).exe"

# Make clean
clean:
	rm -rf "./$(PROGRAM_NAME).exe" "./master.zip" "./BLAKE2-master" "./blake2" "./secp256k1-zkp-master" "./secp256k1-zkp" "./zlib-1.3.1.tar.gz" "./zlib-1.3.1" "./zlib" "./libzip-1.10.1.tar.gz" "./libzip-1.10.1" "./libzip" "./v4.0.0.zip" "./CRoaring-4.0.0" "./croaring"

# Make run
run:
	wine "./$(PROGRAM_NAME).exe"

# Make dependencies
dependencies:
	
	# BLAKE2
	wget "https://github.com/BLAKE2/BLAKE2/archive/master.zip"
	unzip "./master.zip"
	rm "./master.zip"
	mv "./BLAKE2-master" "./blake2"
	mv "./blake2/ref" "./blake2/include"
	
	# Secp256k1-zkp
	wget "https://github.com/mimblewimble/secp256k1-zkp/archive/refs/heads/master.zip"
	unzip "./master.zip"
	rm "./master.zip"
	mv "./secp256k1-zkp-master" "./secp256k1-zkp"
	cd "./secp256k1-zkp" && "./autogen.sh" && "./configure" --prefix="$(CURDIR)/secp256k1-zkp/dist" --disable-shared --enable-endomorphism --enable-experimental --enable-module-generator --enable-module-commitment --enable-module-rangeproof --enable-module-bulletproof --enable-module-aggsig --with-bignum=no --disable-benchmark --host=x86_64-w64-mingw32 CC=x86_64-w64-mingw32-gcc-posix && make && make install
	
	# Zlib
	wget "https://github.com/madler/zlib/releases/download/v1.3.1/zlib-1.3.1.tar.gz"
	tar -xf "./zlib-1.3.1.tar.gz"
	rm "./zlib-1.3.1.tar.gz"
	mv "./zlib-1.3.1" "./zlib"
	cd "./zlib" && sed -i "s/PREFIX =/PREFIX = x86_64-w64-mingw32-\nBINARY_PATH = .\/dist\/bin\nINCLUDE_PATH = .\/dist\/include\nLIBRARY_PATH = .\/dist\/lib/" "./win32/Makefile.gcc" && make -f "./win32/Makefile.gcc" && sed -i "s/$$(PREFIX)gcc/\$$(PREFIX)gcc-posix/" "./win32/Makefile.gcc" && make -f "./win32/Makefile.gcc" install
	
	# Libzip
	wget "https://github.com/nih-at/libzip/releases/download/v1.10.1/libzip-1.10.1.tar.gz"
	tar -xf "./libzip-1.10.1.tar.gz"
	rm "./libzip-1.10.1.tar.gz"
	mv "./libzip-1.10.1" "./libzip"
	cd "./libzip" && cmake -DCMAKE_INSTALL_PREFIX="$(CURDIR)/libzip/dist" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DZLIB_INCLUDE_DIR="$(CURDIR)/zlib/dist/include" -DZLIB_LIBRARY="$(CURDIR)/zlib/dist/lib/libz.a" -DENABLE_BZIP2=OFF -DENABLE_ZSTD=OFF -DENABLE_LZMA=OFF -DENABLE_OPENSSL=OFF -DENABLE_WINDOWS_CRYPTO=OFF -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix "./CMakeLists.txt" && make && make install
	
	# CRoaring
	wget "https://github.com/RoaringBitmap/CRoaring/archive/refs/tags/v4.0.0.zip"
	unzip "./v4.0.0.zip"
	rm "./v4.0.0.zip"
	mv "./CRoaring-4.0.0" "./croaring"
	cd "./croaring" && cmake -DCMAKE_INSTALL_PREFIX="$(CURDIR)/croaring/dist" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DENABLE_ROARING_TESTS=OFF -DCMAKE_SYSTEM_NAME=Windows -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER=x86_64-w64-mingw32-g++-posix "./CMakeLists.txt" && make && make install
